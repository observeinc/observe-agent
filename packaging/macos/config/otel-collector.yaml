extensions:
  health_check:
    endpoint: 'localhost:13133'
    path: '/status'
  file_storage:
    directory: ${env:FILESTORAGE_PATH}

connectors:
  count:

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: localhost:4317
      http:
        endpoint: localhost:4318

processors:
  # Snowflake limit for identifiers: Regardless of whether an identifier is unquoted or double-quoted, the maximum number of characters allowed is 255 (including blank spaces).
  # https://docs.snowflake.com/en/sql-reference/identifiers-syntax#identifier-requirements
  transform/truncate:
    log_statements:
      - context: log
        statements:
          - truncate_all(attributes, 4095)
          - truncate_all(resource.attributes, 4095)
    trace_statements:
      - context: span
        statements:
          - truncate_all(attributes, 4095)
          - truncate_all(resource.attributes, 4095)

  memory_limiter:
    check_interval: 1s
    limit_percentage: 20
    spike_limit_percentage: 5

  batch:

  resourcedetection:
    detectors: [env, system]
    system:
      hostname_sources: ["dns", "os"]
      resource_attributes:
        host.id:
          enabled: false
        os.type:
           enabled: true
        host.arch:
          enabled: true
        host.name:
          enabled: true
        host.cpu.vendor.id:
          enabled: true
        host.cpu.family:
          enabled: true
        host.cpu.model.id:
          enabled: true
        host.cpu.model.name:
          enabled: true
        host.cpu.stepping:
          enabled: true
        host.cpu.cache.l2.size:
          enabled: true
        os.description:
          enabled: true

  resourcedetection/cloud:
    detectors:
    {{- if .CloudResourceDetectors }}
    {{- " " }}{{ inlineArrayStr .CloudResourceDetectors }}
    {{- else }} ["gcp", "ecs", "ec2", "azure"]
    {{- end }}
    timeout: 2s
    override: false

  filter/count:
    error_mode: ignore
    metrics:
      metric:
          - 'IsMatch(name, ".*")'

exporters:
  otlphttp/observe:
    endpoint: ${env:OBSERVE_OTEL_ENDPOINT}
    headers:
      authorization: ${env:OBSERVE_AUTHORIZATION_HEADER}
    sending_queue:
      num_consumers: 4
      queue_size: 100
    retry_on_failure:
      enabled: true
    compression: zstd

  prometheusremotewrite/observe:
    endpoint: ${env:OBSERVE_PROMETHEUS_ENDPOINT}
    headers:
      authorization: ${env:OBSERVE_AUTHORIZATION_HEADER}
    resource_to_telemetry_conversion:
      enabled: true  # Convert resource attributes to metric labels
    send_metadata: true

  debug:

service:
  pipelines:
    metrics/forward:
      receivers: [otlp]
      processors: [resourcedetection, resourcedetection/cloud]
      exporters: [otlphttp/observe]

    logs/forward:
      receivers: [otlp]
      processors: [resourcedetection, resourcedetection/cloud]
      exporters: [otlphttp/observe, count]

    traces/forward:
      receivers: [otlp]
      processors: [resourcedetection, resourcedetection/cloud]
      exporters: [otlphttp/observe]

    metrics/count-nooop:
      receivers: [count]
      processors: [filter/count]
      exporters: [debug]

  extensions: [health_check, file_storage]
  telemetry:
    metrics:
      level: detailed
      address: ":8888"
    logs:
      level: ${env:OTEL_LOG_LEVEL}
