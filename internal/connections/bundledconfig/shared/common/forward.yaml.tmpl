receivers:
  otlp:
    protocols:
      grpc:
        endpoint: localhost:4317
      http:
        endpoint: localhost:4318

processors:
  transform/add_span_status_code:
    error_mode: ignore
    trace_statements:
      - set(span.attributes["observe.status_code"], Int(span.attributes["rpc.grpc.status_code"])) where span.attributes["status_code"] == nil and span.attributes["rpc.grpc.status_code"] != nil
      - set(span.attributes["observe.status_code"], Int(span.attributes["grpc.status_code"])) where span.attributes["status_code"] == nil and span.attributes["grpc.status_code"] != nil
      - set(span.attributes["observe.status_code"], Int(span.attributes["rpc.status_code"])) where span.attributes["status_code"] == nil and span.attributes["rpc.status_code"] != nil
      - set(span.attributes["observe.status_code"], Int(span.attributes["http.status_code"])) where span.attributes["status_code"] == nil and span.attributes["http.status_code"] != nil
      - set(span.attributes["observe.status_code"], Int(span.attributes["http.response.status_code"])) where span.attributes["status_code"] == nil and span.attributes["http.response.status_code"] != nil

  # Always add service.name, service.namespace, and deployment.environment to the resource attributes.
  resource/add_empty_service_attributes:
    attributes:
      - key: service.name
        value: ""
        action: insert
      - key: service.namespace
        value: ""
        action: insert
      - key: deployment.environment
        value: ""
        action: insert

{{- if ne .Forwarding.Traces.MaxSpanDuration "none" }}
  # This drops spans that are longer than the configured time (default 1hr) to match service explorer behavior.
  filter/drop_long_spans:
    error_mode: ignore
    traces:
      span:
        - (span.end_time - span.start_time) > Duration("{{ .Forwarding.Traces.MaxSpanDuration }}")
{{- end }}

exporters:
  otlphttp/observetracing:
    endpoint: ${env:OBSERVE_OTEL_ENDPOINT}
    headers:
      authorization: ${env:OBSERVE_AUTHORIZATION_HEADER}
      x-observe-target-package: "Tracing"
    sending_queue:
      num_consumers: 4
      queue_size: 100
    retry_on_failure:
      enabled: true
    compression: zstd

  otlphttp/observemetrics:
    endpoint: ${env:OBSERVE_OTEL_ENDPOINT}
    headers:
      authorization: ${env:OBSERVE_AUTHORIZATION_HEADER}
      x-observe-target-package: "Metrics"
    sending_queue:
      num_consumers: 4
      queue_size: 100
    retry_on_failure:
      enabled: true
    compression: zstd

service:
  pipelines:
    metrics/forward:
      receivers: [otlp]
      processors:
        - memory_limiter
        - resourcedetection
        - resourcedetection/cloud
        {{- if .HasAttributes }}
        - attributes/observe_global_attributes
        {{- end }}
        {{- if .HasResourceAttributes }}
        - resource/observe_global_resource_attributes
        {{- end }}
        {{- if not .Forwarding.Metrics.OtlpMetrics }}
        - deltatocumulative
        {{- end }}
        - batch
      exporters:
        {{- if .Forwarding.Metrics.OtlpMetrics }}
        - otlphttp/observemetrics
        {{- else }}
        - prometheusremotewrite/observe
        {{- end }}

    logs/forward:
      receivers: [otlp]
      processors:
        - memory_limiter
        - transform/truncate
        - resourcedetection
        - resourcedetection/cloud
        {{- if .HasAttributes }}
        - attributes/observe_global_attributes
        {{- end }}
        {{- if .HasResourceAttributes }}
        - resource/observe_global_resource_attributes
        {{- end }}
        - batch
      exporters: [otlphttp/observe, count]

    traces/forward:
      receivers: [otlp]
      processors:
        - memory_limiter
        {{- if ne .Forwarding.Traces.MaxSpanDuration "none" }}
        - filter/drop_long_spans
        {{- end }}
        - transform/truncate
        - resourcedetection
        - resourcedetection/cloud
        - transform/add_span_status_code
        - resource/add_empty_service_attributes
        {{- if .HasAttributes }}
        - attributes/observe_global_attributes
        {{- end }}
        {{- if .HasResourceAttributes }}
        - resource/observe_global_resource_attributes
        {{- end }}
        - batch
      exporters: [otlphttp/observetracing]
