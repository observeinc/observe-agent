connectors:
  spanmetrics:
    aggregation_temporality: AGGREGATION_TEMPORALITY_DELTA
    histogram:
      exponential:
        max_size: 100
    dimensions:
      # This connector implicitly adds: service.name, span.name, span.kind, and status.code (which we rename to response_status)
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/connector/spanmetricsconnector/connector.go#L528-L540
      - name: service.namespace
      - name: service.version
      - name: deployment.environment
      - name: peer.db.name
      - name: peer.messaging.system
      - name: status.message
      - name: status_code

processors:
  # This handles schema normalization as well as moving status to attributes so it can be a dimension in spanmetrics
  transform/shape_spans_for_red_metrics:
    error_mode: ignore
    trace_statements:
      # peer.db.name = coalesce(peer.db.name, db.system.name, db.system)
      - set(span.attributes["peer.db.name"], span.attributes["db.system.name"]) where span.attributes["peer.db.name"] == nil and span.attributes["db.system.name"] != nil
      - set(span.attributes["peer.db.name"], span.attributes["db.system"]) where span.attributes["peer.db.name"] == nil and span.attributes["db.system"] != nil
      # deployment.environment = coalesce(deployment.environment, deployment.environment.name)
      - set(resource.attributes["deployment.environment"], resource.attributes["deployment.environment.name"]) where resource.attributes["deployment.environment"] == nil and resource.attributes["deployment.environment.name"] != nil
      # Needed because `spanmetrics` connector can only operate on attributes or resource attributes.
      - set(span.attributes["status.message"], span.status.message) where span.status.message != ""

  # This regroups the metrics by the peer attributes so we can remove `service.name` from the resource when these metric attributes are present
  # NB: these will be deleted from the metric attributes and added to the resource.
  groupbyattrs/peers:
    keys:
      - peer.db.name
      - peer.messaging.system

  # This puts moves the peer attributes from the resource back to the datapoint after we have regrouped the metrics.
  transform/fix_peer_attributes:
    error_mode: ignore
    metric_statements:
      - set(datapoint.attributes["peer.db.name"], resource.attributes["peer.db.name"]) where resource.attributes["peer.db.name"] != nil
      - set(datapoint.attributes["peer.messaging.system"], resource.attributes["peer.messaging.system"]) where resource.attributes["peer.messaging.system"] != nil

  # This removes service.name for generated RED metrics associated with peer systems.
  transform/remove_service_name_for_peer_metrics:
    error_mode: ignore
    metric_statements:
      - delete_key(resource.attributes, "service.name") where datapoint.attributes["peer.db.name"] != nil or datapoint.attributes["peer.messaging.system"] != nil

  # This drops spans that are not relevant for Service Explorer RED metrics.
  filter/drop_span_kinds_other_than_server_and_consumer_and_peer_client:
    error_mode: ignore
    traces:
      span:
        - span.kind == SPAN_KIND_CLIENT and span.attributes["peer.messaging.system"] == nil and span.attributes["peer.db.name"] == nil and span.attributes["db.system.name"] == nil and span.attributes["db.system"] == nil
        - span.kind == SPAN_KIND_UNSPECIFIED
        - span.kind == SPAN_KIND_INTERNAL
        - span.kind == SPAN_KIND_PRODUCER

  # The spanmetrics connector puts all dimensions as attributes on the datapoint, and copies the resource attributes from an arbitrary span's resource. This cleans that up as well as handling any other renaming.
  transform/fix_red_metrics_resource_attributes:
    error_mode: ignore
    metric_statements:
      # Drop all resource attributes that aren't dimensions in the spanmetrics connector.
      - keep_matching_keys(resource.attributes, "^(service.name|service.namespace|service.version|deployment.environment)")

      # Drop all datapoint attributes that are resource attributes in the spans.
      - delete_matching_keys(datapoint.attributes, "^(service.name|service.namespace|service.version|deployment.environment)")

      # Rename status.code to response_status to be consistent with Trace Explorer and disambiguate from status_code (with an underscore).
      - set(datapoint.attributes["response_status"], datapoint.attributes["status.code"])
      - delete_key(datapoint.attributes, "status.code")

service:
  pipelines:
    traces/spanmetrics:
      receivers:
        - otlp
      processors:
        - memory_limiter
        {{- if ne .Forwarding.Traces.MaxSpanDuration "none" }}
        - filter/drop_long_spans
        {{- end }}
        - filter/drop_span_kinds_other_than_server_and_consumer_and_peer_client
        - transform/shape_spans_for_red_metrics
        - transform/add_span_status_code
      exporters:
        - spanmetrics

    metrics/spanmetrics:
      receivers:
        - spanmetrics
      processors:
        - memory_limiter
        - groupbyattrs/peers
        - transform/fix_peer_attributes
        - transform/remove_service_name_for_peer_metrics
        - transform/fix_red_metrics_resource_attributes
        - resourcedetection
        - resourcedetection/cloud
        {{- if .HasAttributes }}
        - attributes/observe_global_attributes
        {{- end }}
        {{- if .HasResourceAttributes }}
        - resource/observe_global_resource_attributes
        {{- end }}
        - batch
      exporters:
        - otlphttp/observemetrics
