# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - id: default
    binary: observe-agent
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - darwin
    ldflags: -s -w -X observe-agent/build.Version={{.Version}}

  - id: windows_build
    binary: observe-agent
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
      - '386'
    ldflags: -s -w -X observe-agent/build.Version={{.Version}}

archives:
  - id: default
    format: tar.gz
    builds:
      - default
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    files:
      - src: "packaging/linux/etc/observe-agent/*"
        dst: "."
      - src: "packaging/linux/config/*"
        dst: "."

  - id: windows
    format: zip
    builds:
      - windows_build
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    files:
      - src: "packaging/windows/config/otel-collector.yaml"
        dst: "otel-collector.yaml"
      - src: "packaging/windows/observe-agent.yaml"
        dst: "observe-agent.yaml"
      - src: "packaging/windows/connections/host_monitoring/*"
        dst: "connections/host_monitoring"
      - src: "packaging/windows/connections/self_monitoring/*"
        dst: "connections/self_monitoring"

changelog:
  use: github
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"
  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "Bug Fixes"
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "Configuration Updates"
      regexp: '^.*?config(\([[:word:]]+\))??!?:.+$'
      order: 2
    - title: "Enhancements"
      regexp: '^.*?internal(\([[:word:]]+\))??!?:.+$'
      order: 3
    - title: "Dependency Updates"
      regexp: '^.*?build\(deps\)(\([[:word:]]+\))??!?:.+$'
      order: 4
    - title: Others
      order: 999

nfpms:
  - id: default

    package_name: observe-agent

    # You can change the file name of the package.
    #
    # Default: '{{ .PackageName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}'
    # Templates: allowed
    file_name_template: "{{ .ConventionalFileName }}"

    vendor: Observe Inc.

    # Your app's homepage.
    homepage: https://observeinc.com/

    maintainer: Alex Lew <alex.lew@observeinc.com>

    description: |-
      Observe agent.

    license: Apache 2.0

    formats:
      - apk
      - deb
      - rpm
      - termux.deb # Since: v1.11
      - archlinux # Since: v1.13

    # Umask to be used on files without explicit mode set. (overridable)
    #
    # Default: 0o002 (will remove world-writable permissions)
    # Since: v1.19
    umask: 0o002

    # Packages your package depends on. (overridable)
    # dependencies:
    #   - git
    #   - zsh

    # Packages it provides. (overridable)
    #
    # Since: v1.11
    # provides:
    #   - bar

    # Packages your package recommends installing. (overridable)
    # recommends:
    #   - bzr
    #   - gtk

    # Packages your package suggests installing. (overridable)
    # suggests:
    #   - cvs
    #   - ksh

    # Packages that conflict with your package. (overridable)
    # conflicts:
    #   - svn
    #   - bash

    # Packages it replaces. (overridable)
    # replaces:
    #   - fish

    # Path that the binaries should be installed.
    #
    # Default: '/usr/bin'
    # bindir: /usr/bin

    # Paths to the directories where to put specific types of libraries that
    # GoReleaser built.
    #
    # This should be used together with `builds.buildmode`
    #
    # Since: v1.24.
    # Templates: allowed
    # libdirs:
    #   # Default: '/usr/include'
    #   headers: /usr/include/something

    #   # Default: '/usr/lib'
    #   cshared: /usr/lib/foo

    #   # Default: '/usr/lib'
    #   carchive: /usr/lib/foobar

    # Version Epoch.
    # Default: extracted from `version` if it is semver compatible
    # epoch: 2

    # Version Prerelease.
    # Default: extracted from `version` if it is semver compatible
    # prerelease: beta1

    # Version Metadata (previously deb.metadata).
    # Setting metadata might interfere with version comparisons depending on the
    # packager.
    #
    # Default: extracted from `version` if it is semver compatible
    # version_metadata: git

    # Version Release.
    # release: 1

    # Section.
    section: default

    # Priority.
    priority: extra

    # Makes a meta package - an empty package that contains only supporting
    # files and dependencies.
    # When set to `true`, the `builds` option is ignored.
    # meta: true

    # Changelog YAML file, see: https://github.com/goreleaser/chglog
    #
    # You can use goreleaser/chglog to create the changelog for your project,
    # pass that changelog yaml file to GoReleaser,
    # and it should in turn setup it accordingly for the given available
    # formats (deb and rpm at the moment).
    #
    # Experimental.
    # Since: v1.11
    # changelog: ./foo.yml

    # Contents to add to the package.
    # GoReleaser will automatically add the binaries.
    contents:
      - src: packaging/linux/etc/
        dst: /etc
        type: tree

      - src: packaging/linux/config/observe-agent.yaml
        dst: /etc/observe-agent/observe-agent.yaml
        type: config

      - src: packaging/linux/config/observe-agent.service
        dst: /lib/systemd/system/observe-agent.service
        type: config

      # - src: packaging/etc/observe-agent/config.yaml
      #   dst: /etc/observe-agent/config.yaml
      #   type: config

    #   # Basic file that applies to all packagers
    #   - src: path/to/foo
    #     dst: /usr/bin/foo

    #   # This will add all files in some/directory or in subdirectories at the
    #   # same level under the directory /etc. This means the tree structure in
    #   # some/directory will not be replicated.
    #   - src: some/directory/
    #     dst: /etc

    #   # This will replicate the directory structure under some/directory at
    #   # /etc, using the "tree" type.
    #   #
    #   # Since: v1.17
    #   # Templates: allowed
    #   - src: some/directory/
    #     dst: /etc
    #     type: tree

    #   # Simple config file
    #   - src: path/to/foo.conf
    #     dst: /etc/foo.conf
    #     type: config

    #   # Simple symlink.
    #   # Corresponds to `ln -s /sbin/foo /usr/local/bin/foo`
    #   - src: /sbin/foo
    #     dst: /usr/bin/foo
    #     type: "symlink"

    #   # Corresponds to `%config(noreplace)` if the packager is rpm, otherwise it
    #   # is just a config file
    #   - src: path/to/local/bar.conf
    #     dst: /etc/bar.conf
    #     type: "config|noreplace"

    #   # The src and dst attributes also supports name templates
    #   - src: path/{{ .Os }}-{{ .Arch }}/bar.conf
    #     dst: /etc/foo/bar-{{ .ProjectName }}.conf

    # Additional templated contents to add to the archive.
    # Those files will have their contents pass through the template engine,
    # and its results will be added to the package.
    #
    # This feature is only available in GoReleaser Pro.
    # Since: v1.17 (pro)
    # Templates: allowed
    # templated_contents:
    #   # a more complete example, check the globbing deep dive below
    #   - src: "LICENSE.md.tpl"
    #     dst: LICENSE.md

    #   # These files are not actually present in the package, but the file names
    #   # are added to the package header. From the RPM directives documentation:
    #   #
    #   # "There are times when a file should be owned by the package but not
    #   # installed - log files and state files are good examples of cases you
    #   # might desire this to happen."
    #   #
    #   # "The way to achieve this, is to use the %ghost directive. By adding this
    #   # directive to the line containing a file, RPM will know about the ghosted
    #   # file, but will not add it to the package."
    #   #
    #   # For non rpm packages ghost files are ignored at this time.
    #   - dst: /etc/casper.conf
    #     type: ghost
    #   - dst: /var/log/boo.log
    #     type: ghost

    #   # You can use the packager field to add files that are unique to a
    #   # specific packager
    #   - src: path/to/rpm/file.conf
    #     dst: /etc/file.conf
    #     type: "config|noreplace"
    #     packager: rpm
    #   - src: path/to/deb/file.conf
    #     dst: /etc/file.conf
    #     type: "config|noreplace"
    #     packager: deb
    #   - src: path/to/apk/file.conf
    #     dst: /etc/file.conf
    #     type: "config|noreplace"
    #     packager: apk

    #   # Sometimes it is important to be able to set the mtime, mode, owner, or
    #   # group for a file that differs from what is on the local build system at
    #   # build time.
    #   - src: path/to/foo
    #     dst: /usr/local/foo
    #     file_info:
    #       mode: 0644
    #       mtime: 2008-01-02T15:04:05Z
    #       owner: notRoot
    #       group: notRoot

    #   # If `dst` ends with a `/`, it'll create the given path and copy the given
    #   # `src` into it, the same way `cp` works with and without trailing `/`.
    #   - src: ./foo/bar/*
    #     dst: /usr/local/myapp/

    #   # Using the type 'dir', empty directories can be created. When building
    #   # RPMs, however, this type has another important purpose: Claiming
    #   # ownership of that folder. This is important because when upgrading or
    #   # removing an RPM package, only the directories for which it has claimed
    #   # ownership are removed. However, you should not claim ownership of a
    #   # folder that is created by the OS or a dependency of your package.
    #   #
    #   # A directory in the build environment can optionally be provided in the
    #   # 'src' field in order copy mtime and mode from that directory without
    #   # having to specify it manually.
    #   - dst: /some/dir
    #     type: dir
    #     file_info:
    #       mode: 0700

    # Scripts to execute during the installation of the package. (overridable)
    #
    # Keys are the possible targets during the installation process
    # Values are the paths to the scripts which will be executed.
    #
    # Templates: allowed (since v1.20)
    scripts:
      preinstall: "packaging/linux/scripts/preinstall.sh"
      postinstall: "packaging/linux/scripts/postinstall.sh"
      preremove: "packaging/linux/scripts/preremove.sh"

    # Templated scripts to execute during the installation of the package. (overridable)
    #
    # Keys are the possible targets during the installation process
    # Values are the paths to the scripts which will be executed.
    #
    # This feature is only available in GoReleaser Pro.
    # Since: v1.20 (pro)
    # Templates: allowed
    # templated_scripts:
    #   preinstall: "scripts/preinstall.sh"
    #   postinstall: "scripts/postinstall.sh"
    #   preremove: "scripts/preremove.sh"
    #   postremove: "scripts/postremove.sh"

    # All fields above marked as `overridable` can be overridden for a given
    # package format in this section.
    # overrides:
    #   # The dependencies override can for example be used to provide version
    #   # constraints for dependencies where  different package formats use
    #   # different versions or for dependencies that are named differently.
    #   deb:
    #     dependencies:
    #       - baz (>= 1.2.3-0)
    #       - some-lib-dev
    #     # ...
    #   rpm:
    #     dependencies:
    #       - baz >= 1.2.3-0
    #       - some-lib-devel
    #     # ...
    #   apk:
    #     # ...

    # Custom configuration applied only to the RPM packager.
    # rpm:
    #   # RPM specific scripts.
    #   scripts:
    #     # The pretrans script runs before all RPM package transactions / stages.
    #     pretrans: ./scripts/pretrans.sh
    #     # The posttrans script runs after all RPM package transactions / stages.
    #     posttrans: ./scripts/posttrans.sh

    #   # The package summary.
    #   #
    #   # Default: first line of the description
    #   summary: Observe agent

    #   # The package group.
    #   # This option is deprecated by most distros but required by old distros
    #   # like CentOS 5 / EL 5 and earlier.
    #   group: Unspecified

    #   # The packager is used to identify the organization that actually packaged
    #   # the software, as opposed to the author of the software.
    #   # `maintainer` will be used as fallback if not specified.
    #   # This will expand any env var you set in the field, eg packager: ${PACKAGER}
    #   packager: GoReleaser <staff@goreleaser.com>

    #   # Compression algorithm (gzip (default), lzma or xz).
    #   compression: lzma

    #   # Prefixes for relocatable packages.
    #   #
    #   # Since: v1.20
    #   prefixes:
    #     - /usr/bin

    #   # The package is signed if a key_file is set
    #   signature:
    #     # PGP secret key file path (can also be ASCII-armored).
    #     #
    #     # See "Signing key passphrases" below for more information.
    #     #
    #     # Templates: allowed
    #     key_file: "{{ .Env.GPG_KEY_PATH }}"

    # Custom configuration applied only to the Deb packager.
    # deb:
      # Lintian overrides
      # lintian_overrides:
      #   - statically-linked-binary
      #   - changelog-file-missing-in-native-package

      # # Custom deb special files.
      # scripts:
      #   # Deb rules script.
      #   rules: foo.sh
      #   # Deb templates file, when using debconf.
      #   templates: templates

      # # Custom deb triggers
      # triggers:
      #   # register interest on a trigger activated by another package
      #   # (also available: interest_await, interest_noawait)
      #   interest:
      #     - some-trigger-name
      #   # activate a trigger for another package
      #   # (also available: activate_await, activate_noawait)
      #   activate:
      #     - another-trigger-name

      # Packages which would break if this package would be installed.
      # The installation of this package is blocked if `some-package`
      # is already installed.
      # breaks:
      #   - some-package

      # Packages which would break if this package would be installed.
      # The installation of this package is blocked if `some-package`
      # is already installed.
      #
      # Since: v1.25.
      # breaks:
      #   - some-package

      # The package is signed if a key_file is set
      # signature:
      #   # PGP secret key file path (can also be ASCII-armored).
      #   #
      #   # See "Signing key passphrases" below for more information.
      #   #
      #   # Templates: allowed
      #   key_file: "{{ .Env.GPG_KEY_PATH }}"

      #   # The type describes the signers role, possible values are "origin",
      #   # "maint" and "archive".
      #   #
      #   # Default: 'origin'
      #   type: origin

      # Additional fields for the control file. Empty fields are ignored.
      # This will expand any env vars you set in the field values, e.g. Vcs-Browser: ${CI_PROJECT_URL}
      # fields:
      #   Bugs: https://github.com/goreleaser/nfpm/issues

      # The Debian-specific "predepends" field can be used to ensure the complete installation of a list of
      # packages (including unpacking, pre- and post installation scripts) prior to the installation of the
      # built package.
      # predepends:
      #   - baz (>= 1.2.3-0)

    # apk:
    #   # APK specific scripts.
    #   scripts:
    #     # The preupgrade script runs before APK upgrade.
    #     preupgrade: ./scripts/preupgrade.sh
    #     # The postupgrade script runs after APK.
    #     postupgrade: ./scripts/postupgrade.sh

    #   # The package is signed if a key_file is set
    #   signature:
    #     # PGP secret key file path (can also be ASCII-armored).
    #     #
    #     # See "Signing key passphrases" below for more information.
    #     #
    #     # Templates: allowed
    #     key_file: "{{ .Env.GPG_KEY_PATH }}"

    #     # The name of the signing key. When verifying a package, the signature
    #     # is matched to the public key store in /etc/apk/keys/<key_name>.rsa.pub.
    #     #
    #     # Default: maintainer's email address
    #     # Templates: allowed (since v1.15)
    #     key_name: origin

    # archlinux:
    #   # Archlinux-specific scripts
    #   scripts:
    #     # The preupgrade script runs before pacman upgrades the package.
    #     preupgrade: ./scripts/preupgrade.sh
    #     # The postupgrade script runs after pacman upgrades the package.
    #     postupgrade: ./scripts/postupgrade.sh

    #   # The pkgbase can be used to explicitly specify the name to be used to refer
    #   # to a group of packages. See: https://wiki.archlinux.org/title/PKGBUILD#pkgbase.
    #   # pkgbase: foo

    #   # The packager refers to the organization packaging the software, not to be confused
    #   # with the maintainer, which is the person who maintains the software.
    #   packager: GoReleaser <staff@goreleaser.com>

dockers:
  - image_templates:
      - &amd64_image "docker.io/observeinc/observe-agent:{{ .Version }}-amd64"
    dockerfile: packaging/docker/Dockerfile
    use: buildx
    goos: linux
    goarch: amd64
    build_flag_templates:
      - "--platform=linux/amd64"
    extra_files:
      - packaging/docker
  - image_templates:
      - &arm64v8_image "docker.io/observeinc/observe-agent:{{ .Version }}-arm64v8"
    dockerfile: packaging/docker/Dockerfile
    use: buildx
    goos: linux
    goarch: arm64
    build_flag_templates:
      - "--platform=linux/arm64/v8"
    extra_files:
      - packaging/docker

docker_manifests:
  - name_template: "docker.io/observeinc/observe-agent:{{ .Version }}"
    image_templates:
      - *amd64_image
      - *arm64v8_image
  - name_template: "docker.io/observeinc/observe-agent:latest"
    image_templates:
      - *amd64_image
      - *arm64v8_image

# winget:
#   - # Name of the recipe
#     #
#     # Default: ProjectName
#     # Templates: allowed
#     name: observe-agent

#     # Publisher name.
#     #
#     # Templates: allowed
#     # Required
#     publisher: ObserveInc

#     # Your app's description.
#     #
#     # Templates: allowed
#     # Required
#     short_description: "Observe Agent CLI and collector"

#     # License name.
#     #
#     # Templates: allowed
#     # Required
#     license: "apache-2.0"

#     # Publisher URL.
#     #
#     # Templates: allowed
#     publisher_url: https://observeinc.com

#     # Publisher support URL.
#     #
#     # Templates: allowed
#     publisher_support_url: "https://github.com/observeinc/observe-agent/issues/new"

#     # Package identifier.
#     #
#     # Default: Publisher.ProjectName
#     # Templates: allowed
#     package_identifier: observeinc.observe-agent

#     # IDs of the archives to use.
#     # Empty means all IDs.
#     # ids:
#     #   - foo
#     #   - bar

#     # Which format to use.
#     #
#     # Valid options are:
#     # - '':        archives or binaries
#     # - 'msi':     msi installers (requires the MSI pipe configured, Pro only)
#     # - 'archive': archives (only if format is zip),
#     # - 'binary':  binaries
#     #
#     # Default: ''
#     # Since: v1.24 (pro)
#     # use: msi

#     # GOAMD64 to specify which amd64 version to use if there are multiple
#     # versions from the build section.
#     #
#     # Default: v1
#     goamd64: v1

#     # Product code to be used.
#     #
#     # Usually needed when `use: msi`.
#     #
#     # Since: v1.24 (pro)
#     # product_code: AAAA-BBB-CCC-DDD-EEEFFF

#     # URL which is determined by the given Token (github, gitlab or gitea).
#     #
#     # Default depends on the client.
#     # Templates: allowed
#     # url_template: "https://github.mycompany.com/foo/bar/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

#     # Git author used to commit to the repository.
#     commit_author:
#       name: goreleaserbot
#       email: bot@goreleaser.com

#     # The project name and current git tag are used in the format string.
#     #
#     # Templates: allowed
#     commit_msg_template: "{{ .PackageIdentifier }}: {{ .Tag }}"

#     # Path for the file inside the repository.
#     #
#     # Default: manifests/<lowercased first char of publisher>/<publisher>/<version>
#     path: manifests/g/goreleaser/1.19

#     # Your app's homepage.
#     homepage: "https://example.com/"

#     # Your app's long description.
#     #
#     # Templates: allowed
#     description: "Observe Agent CLI and collector."

#     # License URL.
#     #
#     # Templates: allowed
#     license_url: "https://github.com/observeinc/observe-agent/blob/main/LICENSE"

#     # Copyright.
#     #
#     # Templates: allowed
#     copyright: "Observe Inc"

#     # Copyright URL.
#     #
#     # Templates: allowed
#     # TODO
#     copyright_url: "https://github.com/observeinc/observe-agent/blob/main/LICENSE"

#     # Setting this will prevent goreleaser to actually try to commit the updated
#     # package - instead, it will be stored on the dist directory only,
#     # leaving the responsibility of publishing it to the user.
#     #
#     # If set to auto, the release will not be uploaded to the repository
#     # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
#     #
#     # Templates: allowed
#     skip_upload: true

#     # Release notes.
#     #
#     # If you want to use the release notes generated by GoReleaser, use
#     # `{{.Changelog}}` as the value.
#     #
#     # Templates: allowed
#     release_notes: "{{.Changelog}}"

#     # Release notes URL.
#     #
#     # Templates: allowed
#     # release_notes_url: "https://foo.bar/changelog/{{.Version}}"
#     release_notes_url: "https://github.com/observeinc/observe-agent/releases"

#     # Tags.
#     # tags:
#     #   - golang
#     #   - cli

#     # Package dependencies.
#     #
#     # Since: v1.21
#     # Templates: allowed
#     # dependencies:
#     #   - package_identifier: Foo.Bar
#     #     minimum_version: 1.2.3


#     # Repository to push the generated files to.
#     repository:
#       # Repository owner.
#       #
#       # Templates: allowed
#       owner: caarlos0

#       # Repository name.
#       #
#       # Templates: allowed
#       name: my-repo

#       # Optionally a branch can be provided.
#       #
#       # Default: default repository branch
#       # Templates: allowed
#       branch: main

#       # Optionally a token can be provided, if it differs from the token
#       # provided to GoReleaser
#       # Templates: allowed
#       token: "{{ .Env.GITHUB_PERSONAL_AUTH_TOKEN }}"

#       # Sets up pull request creation instead of just pushing to the given branch.
#       # Make sure the 'branch' property is different from base before enabling
#       # it.
#       #
#       # Since: v1.17
#       pull_request:
#         # Whether to enable it or not.
#         enabled: true

#         # Whether to open the PR as a draft or not.
#         #
#         # Since: v1.19
#         draft: true

#         # If the pull request template has checkboxes, enabling this will
#         # check all of them.
#         #
#         # This feature is only available in GoReleaser Pro.
#         # Since: v1.20 (pro)
#         check_boxes: true

#         # Base can also be another repository, in which case the owner and name
#         # above will be used as HEAD, allowing cross-repository pull requests.
#         #
#         # Since: v1.19
#         base:
#           owner: goreleaser
#           name: my-repo
#           branch: main

#       # Clone, create the file, commit and push, to a regular Git repository.
#       #
#       # Notice that this will only have any effect if the given URL is not
#       # empty.
#       #
#       # Since: v1.18
#       git:
#         # The Git URL to push.
#         #
#         # Templates: allowed
#         url: 'ssh://git@myserver.com:repo.git'

#         # The SSH private key that should be used to commit to the Git
#         # repository.
#         # This can either be a path or the key contents.
#         #
#         # IMPORTANT: the key must not be password-protected.
#         #
#         # WARNING: do not expose your private key in the configuration file!
#         #
#         # Templates: allowed
#         private_key: '{{ .Env.PRIVATE_KEY_PATH }}'

#         # The value to be passed to `GIT_SSH_COMMAND`.
#         # This is mainly used to specify the SSH private key used to pull/push
#         # to the Git URL.
#         #
#         # Default: 'ssh -i {{ .KeyPath }} -o StrictHostKeyChecking=accept-new -F /dev/null'
#         # Templates: allowed
#         ssh_command: 'ssh -i {{ .Env.KEY }} -o SomeOption=yes'

msi:
  - # ID of the resulting installer.
    #
    # Default: the project name
    # id: foo

    # Filename of the installer (without the extension).
    #
    # Default: '{{.ProjectName}}_{{.MsiArch}}'
    # Templates: allowed
    name: "observe-agent_{{ .Version }}-{{.MsiArch}}"

    # The WXS file used to create the installers.
    # The file contents go through the templating engine, so you can do things
    # like `{{.Version}}` inside of it.
    #
    # Templates: allowed
    # Required.
    wxs: ./packaging/windows/app.wsx

    # IDs of the archives to use.
    # Empty means all IDs.
    # ids:
    #   - foo
    #   - bar

    # GOAMD64 to specify which amd64 version to use if there are multiple
    # versions from the build section.
    #
    # Default: v1
    goamd64: v1

    # More files that will be available in the context in which the installer
    # will be built.
    # extra_files:
    #   - logo.ico

    # Whether to remove the archives from the artifact list.
    # If left as false, your end release will have both the zip and the msi
    # files.
    replace: false

    # Set the modified timestamp on the output installer, typically
    # you would do this to ensure a build was reproducible.
    # Pass an empty string to skip modifying the output.
    #
    # Templates: allowed.
    mod_timestamp: "{{ .CommitTimestamp }}"

brews:
  -
    # Name of the recipe
    #
    # Default: ProjectName
    # Templates: allowed
    name: observe-agent

    # Alternative names for the current recipe.
    #
    # Useful if you want to publish a versioned formula as well, so users can
    # more easily downgrade.
    #
    # Since: v1.20 (pro)
    # Templates: allowed
    # alternative_names:
    #   - myproject@{{ .Version }}
    #   - myproject@{{ .Major }}

    # IDs of the archives to use.
    # Empty means all IDs.
    # ids:
    # - foo
    # - bar

    # Sets the app file within a DMG.
    #
    # Since: 1.24 (pro)
    # app: MyApp.app

    # GOARM to specify which 32-bit arm version to use if there are multiple
    # versions from the build section. Brew formulas support only one 32-bit
    # version.
    #
    # Default: 6
    goarm: 6

    # GOAMD64 to specify which amd64 version to use if there are multiple
    # versions from the build section.
    #
    # Default: v1
    goamd64: v1

    # NOTE: make sure the url_template, the token and given repo (github or
    # gitlab) owner and name are from the same kind.
    # We will probably unify this in the next major version like it is
    # done with scoop.

    # URL which is determined by the given Token (github, gitlab or gitea).
    #
    # Default depends on the client.
    # Templates: allowed
    # url_template: "https://github.mycompany.com/foo/bar/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    # Headers to include in the `url` stanza.
    # This can be a more modern alternative to `download_strategy` in some
    # cases.
    #
    # Since: v1.25
    # url_headers:
    #   - "Accept: application/octet-stream"
    #   - 'Authorization: bearer #{ENV["HOMEBREW_GITHUB_API_TOKEN"]}'

    # Allows you to set a custom download strategy. Note that you'll need
    # to implement the strategy and add it to your tap repository.
    # Example: https://docs.brew.sh/Formula-Cookbook#specifying-the-download-strategy-explicitly
    # download_strategy: CurlDownloadStrategy
    # download_strategy: GitHubPrivateRepositoryReleaseDownloadStrategy

    # Allows you to add a custom require_relative at the top of the formula
    # template.
    # custom_require: custom_download_strategy

    # Git author used to commit to the repository.
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed
    commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

    # Directory inside the repository to put the formula.
    # directory: Formula

    # Caveats for the user of your binary.
    # caveats: "How to use this binary"

    # Your app's homepage.
    homepage: "https://observeinc.com/"

    # Your app's description.
    #
    # Templates: allowed
    description: "Observe-Agent is a tool for collecting and exporting metrics from your infrastructure."

    # SPDX identifier of your app's license.
    license: "Apache-2.0"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist directory
    # only, leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed
    skip_upload: true

    # Custom block for brew.
    # Can be used to specify alternate downloads for devel or head releases.
    # custom_block: |
    #   head "https://github.com/some/package.git"
    #   ...

    # Packages your package depends on.
    # dependencies:
    #   - name: git
    #     # Allow to specify the OS in which the dependency is required.
    #     # Valid options are `mac` and `linux`.
    #     #
    #     # Since: v1.23.0
    #     os: mac
    #   - name: zsh
    #     type: optional
    #   - name: fish
    #     version: v1.2.3
    #   # if providing both version and type, only the type will be taken into
    #   # account.
    #   - name: elvish
    #     type: optional
    #     version: v1.2.3


    # Packages that conflict with your package.
    # conflicts:
    #   - svn
    #   - bash

    # Specify for packages that run as a service.
    # plist: |
    #   <?xml version="1.0" encoding="UTF-8"?>
    #   # ...

    # Service block.
    #
    # Since: v1.7
    # service: |
    #   run: foo/bar
    #   # ...

    # So you can `brew test` your formula.
    #
    # Template: allowed
    # test: |
    #   system "#{bin}/foo --version"
    #   # ...

    # Custom install script for brew.
    #
    # Template: allowed
    # Default: 'bin.install "BinaryName"'
    # install: |
    #   bin.install "some_other_name"
    #   bash_completion.install "completions/foo.bash" => "foo"
    #   # ...

    # Additional install instructions so you don't need to override `install`.
    #
    # Template: allowed
    # Since: v1.20
    # extra_install: |
    #   bash_completion.install "completions/foo.bash" => "foo"
    #   man1.install "man/foo.1.gz"
    #   # ...

    # Custom post_install script for brew.
    # Could be used to do any additional work after the "install" script
    # post_install: |
    #     etc.install "app-config.conf"
    #   # ...

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed
      owner: observeinc

      # Repository name.
      #
      # Templates: allowed
      name: homebrew-tap

      # Optionally a branch can be provided.
      #
      # Default: default repository branch
      # Templates: allowed
      branch: main

      # Optionally a token can be provided, if it differs from the token
      # provided to GoReleaser
      # Templates: allowed
      # token: "{{ .Env.GITHUB_PERSONAL_AUTH_TOKEN }}"

      # Sets up pull request creation instead of just pushing to the given branch.
      # Make sure the 'branch' property is different from base before enabling
      # it.
      #
      # Since: v1.17
      pull_request:
        # Whether to enable it or not.
        enabled: true

        # Whether to open the PR as a draft or not.
        #
        # Since: v1.19
        draft: true

        # If the pull request template has checkboxes, enabling this will
        # check all of them.
        #
        # This feature is only available in GoReleaser Pro.
        # Since: v1.20 (pro)
        check_boxes: true

        # Base can also be another repository, in which case the owner and name
        # above will be used as HEAD, allowing cross-repository pull requests.
        #
        # Since: v1.19
        base:
          # owner: goreleaser
          # name: my-repo
          branch: main

      # Clone, create the file, commit and push, to a regular Git repository.
      #
      # Notice that this will only have any effect if the given URL is not
      # empty.
      #
      # Since: v1.18
      # git:
      #   # The Git URL to push.
      #   #
      #   # Templates: allowed
      #   url: 'git@github.com:observeinc/homebrew-tap.git'

      #   # The SSH private key that should be used to commit to the Git
      #   # repository.
      #   # This can either be a path or the key contents.
      #   #
      #   # IMPORTANT: the key must not be password-protected.
      #   #
      #   # WARNING: do not expose your private key in the configuration file!
      #   #
      #   # Templates: allowed
      #   private_key: '{{ .Env.PRIVATE_KEY_PATH }}'

      #   # The value to be passed to `GIT_SSH_COMMAND`.
      #   # This is mainly used to specify the SSH private key used to pull/push
      #   # to the Git URL.
      #   #
      #   # Default: 'ssh -i {{ .KeyPath }} -o StrictHostKeyChecking=accept-new -F /dev/null'
      #   # Templates: allowed
      #   ssh_command: 'ssh -i {{ .Env.KEY }} -o SomeOption=yes'

furies:
  - account: observeinc
